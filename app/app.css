/* app css stylesheet */

th, td {
  text-align: center;
  //font-size: 14px;
  white-space: nowrap;
}

tr {
  //font-size:0 ;
}

th > span {
  display:inline-block; <!-- make rotate work on inline -->  
}

.menu {
  list-style: none;
  border-bottom: 0.1em solid black;
  margin-bottom: 2em;
  padding: 0 0 0.5em;
}

.menu:before {
  content: "[";
}

.menu:after {
  content: "]";
}

.menu > li {
  display: inline;
}

.menu > li:before {
  content: "|";
  padding-right: 0.3em;
}

.menu > li:nth-child(1):before {
  content: "";
  padding: 0;
}

.my-form {
 -webkit-transition:all linear 0.5s;
 transition:all linear 0.5s;
 background: transparent;
}

.my-form.ng-invalid {
 background: red;
}

.strike {
  text-decoration: line-through;
}

/*
 We're using CSS transitions for when
 the enter and move events are triggered
 for the element that has the .repeated-item
 class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
 -webkit-transition:0.5s linear all;
 -moz-transition:0.5s linear all;
 -o-transition:0.5s linear all;
 transition:0.5s linear all;
 opacity:0;
}

/*
The ng-enter-active and ng-move-active
are where the transition destination properties
are set so that the animation knows what to
animate.
*/
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
 opacity:1;
}

/*
 We're using CSS keyframe animations for when
 the leave event is triggered for the element
 that has the .repeated-item class
*/
.repeated-item.ng-leave {
 -webkit-animation:0.5s my_animation;
 -moz-animation:0.5s my_animation;
 -o-animation:0.5s my_animation;
 animation:0.5s my_animation;
}

@keyframes my_animation {
 from { opacity:1; }
 to { opacity:0; }
}

/*
 Unfortunately each browser vendor requires
 its own definition of keyframe animation code...
*/
@-webkit-keyframes my_animation {
 from { opacity:1; }
 to { opacity:0; }
}

@-moz-keyframes my_animation {
 from { opacity:1; }
 to { opacity:0; }
}

@-o-keyframes my_animation {
 from { opacity:1; }
 to { opacity:0; }
}

.glyphicon-remove {
  float:right;
}


.rotate {
  //display:inline-block; <!-- make rotate work on inline -->  
  //-moz-transform:rotate(-90deg); 
  //-moz-transform-origin: top left;
  //-webkit-transform: rotate(-90deg);
  //-webkit-transform-origin: top left;
  -webkit-animation: rotatefwd 1s;
  -webkit-animation-fill-mode: forwards;
  //-o-transform: rotate(-90deg);
  //-o-transform-origin:  top left;
  position:relative;
  //top:20px;
}

.rotate_cell
{
 height:120px;
 width: 1px;
 overflow: hidden;
 //vertical-align:bottom;
}


@-webkit-keyframes rotatefwd {
    100% {
      -webkit-transform: rotate(-90deg);
      -webkit-transform-origin: top left;
    }
}

.rotateback {
  -webkit-animation: rotateback 1s;
  -webkit-animation-fill-mode: forwards;
  position:relative;
  //top:20px;
}

@-webkit-keyframes rotateback {
    100% {
      -webkit-transform: rotate(90deg);
      -webkit-transform-origin: top left;
    }
}

/*
table { 
  border: 1px solid #ddd;
  border-collapse: separate;
  border-left: 0;
  border-radius: 20px;
  border-spacing: 0px;
}

thead:first-child tr:first-child th:first-child {
  border-radius: 20px 0 0 0;
}

thead:first-child tr:first-child th:last-child {
  border-radius: 0 20px 0 0;
}

tbody:last-child tr:last-child td:first-child {
    border-radius: 0 0 0 20px;
}

tbody:last-child tr:last-child td:last-child {
    border-radius: 0 0 20px 0;
}*/


.table-curved { 
  border: 1px solid #ddd;
  border-collapse: separate;
  border-left: 0;
  border-radius: 20px;
  border-spacing: 0px;
}

.table-curved thead:first-child tr:first-child th:first-child {
  border-radius: 20px 0 0 0;
}

.table-curved thead:first-child tr:first-child th:last-child {
  border-radius: 0 20px 0 0;
}

.table-curved tbody:last-child tr:last-child td:first-child {
    border-radius: 0 0 0 20px;
}

.table-curved tbody:last-child tr:last-child td:last-child {
    border-radius: 0 0 20px 0;
}

/*
@keyframes spin {
    50% {transform: rotate(-90deg);}
}*/
